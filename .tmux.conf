#===============<<<      Default Key Bind        >>>===============================
#
# [prefix] ? キーバインド一覧
#
## ウィンドウ(タブ)
# [prefix] c ウィンドウ作成
# [prefix] , ウィンドウの名前変更
# [prefix] . ウィンドウ位置を移動
# [prefix] w ウィンドウ一覧選択
# [prefix] & ウィンドウの破棄
# [prefix] n 次のウィンドウへ移動
# [prefix] p 前のウィンドウへ移動
# [prefix] 0-9 該当番号のウィンドウへ移動
# [prefix] l 以前のウィドウへ移動
#
## セッション
# [prefix] s セッションの一覧選択
# [prefix] d セッションから離脱(デタッチ)
# [prefix] $ セッションの名前変更
# [prefix] C-s save session, window, pane
# [prefix] C-r restor window
#
## ペイン
# [prefix] H ペイン区切りを左に移動(拡大/縮小)
# [prefix] L ペイン区切りを右に移動(拡大/縮小)
# [prefix] J ペイン区切りを下に移動(拡大/縮小)
# [prefix] D ペイン区切りを上に移動(拡大/縮小)
# [prefix] } カレントペインを移動(clockwise)
# [prefix] { カレントペインを移動(c-clockwise)
# [prefix] ! ペインを解除してウインドウ化
#
## コピーモード
# [prefix] v コピーモード開始
# [prefix] [ コピー/ペーストモード開始
# [prefix] z カレントPaneを最大化/戻す
##
# ctrl+Z tmuxを一時中断 ※ fgで復帰
#===============<<<      Key Bind        >>>===============================

# reload .tmux.conf ([prefix] r)
bind r source-file ~/.tmux.conf \; display "loaded!"
# set prefix key
set -g prefix C-g
# set prefix for linux(リモート上)
if-shell 'test "$(uname -s)" = Linux' "set -g prefix C-g \; unbind C-b"
# unbind prefix key
unbind C-b
# toggle pane by same as prefix key
bind C-t last-pane
if-shell 'test "$(uname -s)" = Linux' "bind C-g last-pane \; unbind C-b"

# change pane awesome vim keybind
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind -r C-h select-pane -L
bind -r C-j select-pane -D
bind -r C-k select-pane -U
bind -r C-l select-pane -R
bind -r C-n next-window
#bind -r C-h select-window -t :-
#bind -r C-l select-window -t :+

# Vimのキーバインドでペインをリサイズする
bind -r H resize-pane -L 5
bind -r < resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
bind -r > resize-pane -R 5

# split pane by the vertical by `|`
bind | split-window -h

# split pane by the horizontal by `-`
bind - split-window -v

# aggressive resize-----
# 違うマシンから接続した時のリサイズ
# setw -g aggressive-resize on
#

set -sg escape-time 1      # degree delay of key stroke
set -g base-index 1        # start index of window from 1 rather than 0
setw -g pane-base-index 1  # start index of pane from 1 rather than 0
bind C-a send-prefix       # send C-a inner plugram of tmux by C-a*2


#===============<<<      Copy Mode        >>>===============================

# コピーモードがクリップボードに連携しない場合は下記を確認
# $ echo $DISPLAY -> 設定されているか?
# $ xeyes         -> 目玉アプリが起動するか?

# vi-Copy-mode
set-window-option -g mode-keys vi
# Prefix+v でコピーモード開始
bind-key v copy-mode
bind-key -T copy-mode-vi v send-keys -X begin-selection

# バインド設定
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel 'win32yank.exe -i'

# ===============<<< マウス設定 > {{{
# set-option -g mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"
# 画面ドラッグ時にコピーモードにする
# マウスでペインを選択できるようにする
# マウスでウィンドウを切り替えられるようにする
# マウスでリサイズできるようにする
#}}}


#===============<<<      Visual        >>>===============================
# 256色端末を使用する
# 下記なくても.bashrcに`export TERM=xte3rm-256color`を指定で
# 256色表示可能
# $ echo $TERM
# xterm-256coor
# と表示されればOK`screen`と表示される場合16色
##################
set -g default-terminal "screen-256color"
set-option -ga terminal-overrides ',xterm-256color:Tc'
#-----focus env----------
# set-option -g focus-events on

#-----active window------
setw -g window-status-current-style bg="green","bright",fg="white"

#-----pane border------
set -g pane-border-style bg="white",fg="black"

#-----active pane------
set -g pane-active-border-style bg="white",fg="black"

#-----visual notification------
setw -g monitor-activity on
set -g visual-activity on

#-----status bar color------
set -g status-fg white
set -g status-bg colour238
set-option -g status-bg "colour238"

#-----status bar position------
set -g status-position top
#set -g status-position bottom

#-----left of status line------
set -g status-left-length 40
set -g status-left '#[fg=green]   Session: #S #[fg=yellow]#I #[fg=cyan]#P :   #[fg=white,bg=black] #H #[fg=white]'
# Prefixキーが押された際にステータスラインを反転してフィードバック
# http://qiita.com/dtan4/items/363e92525e7c5a16f3fc
set-option -g status-left '#[fg=cyan,bg=#303030]#{?client_prefix,#[reverse],} #H[#S] #[default]'

#-----right of status line------
# [battery](https://github.com/tmux-plugins/tmux-battery)
set -g status-right "#{battery_icon} #{battery_percentage}#[bg=colour238]  #[fg=white]📆  %Y/%m/%d(%a)  🕑   #[fg=color46,bold]%H:%M     "

# #-----window list------
setw -g window-status-style bg="default","dim",fg="white"

## ウィンドウリストの位置を中心寄せにする
set -g status-justify centre
# window-status のフォーマットを指定する。
set-window-option -g window-status-format " #I: #W "
# カレントウィンドウの window-status のフォーマットを指定する
set-window-option -g window-status-current-format "#[fg=colour255,bg=colour8,bold] #I: #W  #[default]"

#===============<<<      Static        >>>===============================
# Command Sequence for Nested Tmux Sessions
bind-key a send-prefix
# set default shell
set-option -g default-shell /bin/bash
set -g default-command /bin/bash
# limit for window history
set-option -g history-limit 5000
 
# #===============<<<      tpm(plugin manager)        >>>===============================
# # [tmux plugin管理 tpm](https://qiita.com/izumin5210/items/5b7f4c01fb6fe6064a05)
# # [prefix] I install
set -g @tpm_plugins '              \
        tmux-plugins/tpm                 \
        tmux-plugins/tmux-resurrect      \
        tmux-plugins/tmux-open           \
        tmux-plugins/tmux-battery        \
        '
 
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-processes 'irb pry "~rails server" "~rails console"'
 
run-shell '~/.tmux/plugins/tpm/tpm'


