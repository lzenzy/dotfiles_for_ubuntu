###### For Dein settings #########
# Dein is plugin manager
# プラグイン追加後下記実行
# :call dein#install()
# :call dein#update()
#################################

# Required:
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'leico/autodate.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_mac()
    let cmd = 'make -f make_mac.mak'
  elseif dein#util#_is_unix()
    let cmd = 'make -f make_unix.mak'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_post_update = '''
  " 結果を下に表示
  let g:quickrun_config={'*': {'split': ''}}
  set splitbelow
  let g:quickrun_config = {'*': {'hook/time/enable': '1'},}
  " 常に実行時間を表示
  let g:quickrun_config = {'*': {'hook/time/enable': '1'},}
  " Python3で実行
  let g:quickrun_config = {
    \ 'python': {
    \   'command': 'python3'
    \ },}
  nnoremap <silent> <C-q> :QuickRun<CR>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  lua vim.notify("vim-fugitive has been loaded!")
'''

####   Light Line
[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['tpope/vim-fugitive']
hook_add = '''
command! -bar Llupdate    call lightline#init()|
  \ call lightline#update()

let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'branch', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'readonly': 'LightlineReadonly',
      \   'modified': 'LightlineModified',
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename'
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '|', 'right': '|' }
      \ }

function! LightlineModified()
  if &filetype == 'help'
    return ''
  elseif &modified
    return '+'
  elseif &modifiable
    return ''
  else
    return '-'
  endif
endfunction

function! LightlineReadonly()
  if &filetype == 'help'
    return ''
  elseif &readonly
    return 'x'
  else
    return ''
  endif
endfunction

function! LightlineFugitive()
  if exists('*FugitiveHead')
    if &ft !~? 'vimfiler\|gundo' && winwidth(0) > 55
      let branch = FugitiveHead()
      let fugitive_info = branch != '' ? '⭠ ' . branch : ''
      return fugitive_info
    endif
  endif
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
       \ ('' != expand('%') && winwidth(0) <=90 ? expand('%:t')
       \ : winwidth(0) >90 ? expand('%:p') : '[No Name]') .
       \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

let g:lightline.tab = {
      \ 'active': [ 'tabnum', 'filename', 'modified' ],
      \ 'inactive': [ 'tabnum', 'filename', 'modified' ]
      \ }

let g:lightline.tab_component_function = {
      \ 'filename': 'LightlineTabFilename',
      \ 'modified': 'lightline#tab#modified',
      \ 'readonly': 'lightline#tab#readonly',
      \ 'tabnum': 'lightline#tab#tabnum' }

function! LightlineTabFilename(n) abort
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)
  let _ = pathshorten(expand('#'.buflist[winnr - 1].':f'))
  return _ !=# '' ? _ : '[No Name]'
endfunction
'''

[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
set sh=bash
let g:neoterm_default_mod = 'horizontal'
" ESCでcommand modeに戻る
tnoremap <silent> <ESC> <C-\><C-n>
" jjでcommand modeに戻る
" tigなどのカーソル移動で不便なのでOFF
" tnoremap <silent> jj <C-\><C-n>

" Useful maps
" hide/close terminal
nnoremap <silent> ,th :call neoterm#close()<cr>
" clear terminal
nnoremap <silent> ,tl :call neoterm#clear()<cr>
" kills the current job (send a <c-c>)
nnoremap <silent> ,tc :call neoterm#kill()<cr>

" Git commands
command! -nargs=+ Tg :T git <args>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
"-----gitgutter-----"{{{

set laststatus=2
let g:Powerline_symbols = 'fancy'

" vim-gitgutter
let g:gitgutter_sign_added = '＋'
let g:gitgutter_sign_modified = '➜ '
let g:gitgutter_sign_removed = '✖ '
let g:gitgutter_max_signs = 1000

function! DispatchUniteFileRecAsyncOrGit()
  if isdirectory(getcwd()."/.git")
    Unite file_rec/git
  else
    Unite file_rec/async
  endif
endfunction
nnoremap <silent> [unite]<CR> :<C-u>call DispatchUniteFileRecAsyncOrGit()<CR>

'''

#ディレクトリツリー表示
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add='''
" bookmarkを初期表示
let g:NERDTreeShowBookmarks=1
" 起動時にNERDTreeを表示
" autocmd vimenter * NERDTree
" ファイル名を指定して起動した場合は非表示
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" 表示/非表示切り替え
nnoremap <C-n> :NERDTreeToggle<CR>
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction
call NERDTreeHighlightFile('py', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('rb', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add='''
let g:indent_guides_enable_on_vim_startup = 1                                   
let g:indent_guides_auto_colors = 0                                             
let g:indent_guides_guide_size = 2
let g:indent_guides_start_level=2
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'javascript']
autocmd ColorScheme * highlight IndentGuidesOdd guibg=#232526 ctermbg=236
autocmd ColorScheme * highlight IndentGuidesEven guibg=#232526 ctermbg=236
"" autocmd ColorScheme * highlight IndentGuidesEven guibg=#333344 ctermbg=darkgray
'''

[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add='''
"" memolistの設定
" memolist.vimのディレクトリ----------
let g:memolist_path = "~/notes/"

" suffix type (default markdown)
let g:memolist_memo_suffix = "markdown"

" date format (default %Y-%m-%d %H:%M)
let g:memolist_memo_date = "%Y-%m-%d %H:%M"

" use denite (default 0)
let g:memolist_denite = 1

let g:memolist_denite_source = "file/rec"

" let g:memolist_denite_option = "-auto-preview"
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add='''
" Visual mode -> ga -> *,
" ga -> text-object -> *,
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
''' 

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
# 日付もインクリメント
repo = 'tpope/vim-speeddating'

[[plugins]]
#" # [参考](https://qiita.com/tekkoc/items/98adcadfa4bdc8b5a6ca)
#" # sをwindow操作系のprefixに設定
repo = 'kana/vim-submode'
hook_add='''
 call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
 call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
 call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
 call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
 call submode#map('bufmove', 'n', '', '>', '<C-w>>')
 call submode#map('bufmove', 'n', '', '<', '<C-w><')
 call submode#map('bufmove', 'n', '', '+', '<C-w>+')
 call submode#map('bufmove', 'n', '', '-', '<C-w>-')
'''

[[plugins]] # GitHub Copilot（すでに入っている場合は不要。zbirenbaum/copilot.lua でも良いそうです。）
repo = 'github/copilot.vim'

[[plugins]]
repo = 'jpalardy/vim-slime'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'rking/ag.vim'

[[plugins]]
repo = 'nazo/pt.vim'

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'

[[plugins]]
repo = 'Shougo/vimfiler'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
# [参考](https://qiita.com/tekkoc/items/98adcadfa4bdc8b5a6ca)
# sをwindow操作系のprefixに設定
repo = 'kana/vim-submode'
hook_add='''
  call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
  call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
  call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
  call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
  call submode#map('bufmove', 'n', '', '>', '<C-w>>')
  call submode#map('bufmove', 'n', '', '<', '<C-w><')
  call submode#map('bufmove', 'n', '', '+', '<C-w>+')
  call submode#map('bufmove', 'n', '', '-', '<C-w>-')
'''

