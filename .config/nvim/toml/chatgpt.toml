[[plugins]]
 repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
hook_add= '''
nnoremap <leader>f <cmd>lua require('telescope.builtin').find_files({hidden=false})<CR>
nnoremap <leader>. <cmd>lua require('telescope.builtin').find_files({hidden=true})<CR>
nnoremap <leader>g <cmd>lua require('telescope.builtin').live_grep()<CR>
nnoremap <leader>r <cmd>lua require('telescope.builtin').resume()<CR>
nnoremap <leader>t <cmd>lua require('telescope.builtin').(treesitter)<CR>
nnoremap <leader>b <cmd>lua require('telescope.builtin').buffers()<CR>
nnoremap <leader>" <cmd>lua require('telescope.builtin').registers()<CR>
nnoremap <leader>h <cmd>lua require('telescope.builtin').help_tags()<CR>
let s:dein_dir = expand('~/.cache') . '/dein/repos/github.com/'
execute 'set runtimepath+=' . s:dein_dir . 'nvim-telescope/telescope.nvim/'
execute 'set runtimepath+=' . s:dein_dir . 'nvim-lua/plenary.nvim'
lua << EOF
require("telescope").setup{
  defaults = {
    mappings = {
      n = {
        ["<esc>"] = require("telescope.actions").close,
        ["q"] = require("telescope.actions").close
      },
      i = {
        ["<esc>"] = require("telescope.actions").close,
        ["q"] = require("telescope.actions").close,
        ["<C-a>"] = require("telescope.actions").send_to_qflist + require("telescope.actions").open_qflist,
        ["<C-q>"] = require("telescope.actions").send_selected_to_qflist + require("telescope.actions").open_qflist
      },
    },
  },
}
EOF
'''

[[plugins]]
repo = 'jackMort/ChatGPT.nvim'
depends = [
  'MunifTanjim/nui.nvim',
]
hook_add = """
let s:dein_dir = expand('~/.cache') . '/dein/repos/github.com/'
execute 'set runtimepath+=' . s:dein_dir . 'jackMort/ChatGPT.nvim/'
execute 'set runtimepath+=' . s:dein_dir . 'MunifTanjim/nui.nvim/'
execute 'set runtimepath+=' . s:dein_dir . 'nvim-lua/plenary.nvim/'
execute 'set runtimepath+=' . s:dein_dir . 'nvim-telescope/telescope.nvim/'
lua << EOF
require("chatgpt").setup(
{
  welcome_message = WELCOME_MESSAGE, -- set to "" if you don't like the fancy godot robot
  loading_text = "loading",
  question_sign = "ðŸ‘€", -- you can use emoji if you want e.g. ðŸ™‚
  answer_sign = "ðŸ¤–", -- ðŸ¤–
  max_line_length = 120,
  yank_register = "+",
  chat_layout = {
    relative = "editor",
    position = "50%",
    size = {
      height = "80%",
      width = "80%",
    },
  },
  settings_window = {
    border = {
      style = "rounded",
      text = {
        top = " Settings ",
      },
    },
  },
  chat_window = {
    filetype = "chatgpt",
    border = {
      highlight = "FloatBorder",
      style = "rounded",
      text = {
        top = " ChatGPT ",
      },
    },
  },
  chat_input = {
    prompt = " @ ",
    border = {
      highlight = "FloatBorder",
      style = "rounded",
      text = {
        top_align = "center",
        top = " Prompt ",
      },
    },
  },
  openai_params = {
    model = "gpt-3.5-turbo",
    frequency_penalty = 0,
    presence_penalty = 0,
    max_tokens = 300,
    temperature = 0,
    top_p = 1,
    n = 1,
  },
  openai_edit_params = {
    model = "code-davinci-edit-001",
    temperature = 0,
    top_p = 1,
    n = 1,
  },
  keymaps = {
    close = { "<C-c>", "<Esc>" },
    yank_last = "<C-y>",
    scroll_up = "<C-u>",
    scroll_down = "<C-d>",
    toggle_settings = "<C-o>",
    new_session = "<C-n>",
    cycle_windows = "<Tab>",
  },
}
)
EOF
"""
